@model UNIFAFIBE.TCC._4Sales.Aplicacao.ViewModel.ProdutoViewModel

@{
    ViewBag.Title = "Remover";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card border-dark mt-2">
    <div class="card-header bg-dark">
        <span class="h5 text-white">
            <i class="fas fa-box icone-cadastro"></i>
            Remover Produto
        </span>
    </div>
    <div class="card-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.AntiForgeryToken()
            <input type="hidden" name="RepresentadaId" id="RepresentadaId" value="@Model.RepresentadaId" />
            @Html.HiddenFor(model => model.ProdutoId)
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Codigo, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Codigo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Codigo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" }) <span class="span-obrigatorio">*</span>
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.UnidadeMedida, htmlAttributes: new { @class = "control-label" }) <span class="span-obrigatorio">*</span>
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.UnidadeMedida, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.UnidadeMedida, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.IPI, htmlAttributes: new { @class = "control-label" }) <span class="span-obrigatorio">*</span>
                </div>
                <div class="col-md-3">
                    <div class="input-group mb-3">
                        @Html.EditorFor(model => model.IPI, new { htmlAttributes = new { @class = "form-control mValor", @readonly = "readonly" } })
                        <div class="input-group-append">
                            <span class="input-group-text" id="basic-addon2">R$</span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.IPI, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Preco, htmlAttributes: new { @class = "control-label" }) <span class="span-obrigatorio">*</span>
                </div>
                <div class="col-md-3">
                    <div class="input-group mb-3">
                        @Html.EditorFor(model => model.Preco, new { htmlAttributes = new { @class = "form-control mValor", @readonly = "readonly" } })
                        <div class="input-group-append">
                            <span class="input-group-text" id="basic-addon2">R$</span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Preco, "", new { @class = "text-danger" })
                </div>
            </div>
        <div class="col-md-12 d-flex justify-content-end">
            <div>
                <button type="button" class="btn btn-primary mr-1" data-toggle="modal" data-target="#confirmarRemocao">Remover</button>
                @Html.ActionLink("Cancelar", "Painel", "Representada", new { id = Model.RepresentadaId }, new { @class = "btn btn-danger" })
            </div>
        </div>
    </div>
</div>

<div class="modal" id="confirmarRemocao" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Remover</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Fechar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="h4">Atenção</p>
                <p class="lead">Você está prestes a remover o produto <strong>@Model.Nome</strong></p>
                <p class="lead"><strong>Deseja realmente remove-lo?</strong></p>
                @using (Html.BeginForm("Remover", "Produto", FormMethod.Post, new { id = "form-remover" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.ProdutoId)
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="$('#form-remover').submit()">Confirmar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/Produto")
}
